= Introduction
Model Grinder is a library to make the generation of data for use in tests. It is inspired by dm-sweatshop and is
intended for use in all ORMs, not just DataMapper.

== Setup
To use with one ORM, pass the name of the ORM to ModelGrinder.integrate via a symbol. Like so:
   ModelGrinder.integrate(:datamapper)

Currently the options are :datamapper, :activerecord, and :mongoid. If you wish to simply have it load for all available
ORMs, pass the argument of :all instead of the ORM name.

Note that you do not have to integrate if you wish to use the ModelGrinder to make all the calls instead of calling
directly on the models. You will need to call the `integrate` method AFTER your models are defined.

== Usage
=== Templates
An example is worth ten million words and two examples are worth twenty million, I suppose. Both are identical -
the second sets up and calls the same methods the first one does.
 ModelGrinder.template(YourModel, :valid ) {{
   name: /\w+/.gen,
   some_text: /[:sentence]/.gen
   some_number: rand(5938571234)
 }}
 YourModel.template(:valid) {{
   name: /\w+/.gen,
   some_text: /[:sentence]/.gen
   some_number: rand(5938571234) + 6
 }}
Your first question might be: "what the crap is up with the double curly braces??" Well, the first curly brace is
the beginning of the block, the second curly brace is the beginning of the hash. You pass a hash inside a block so
that the library can call this block multiple times and get different results. Anything you want to stay the same
you pass in as a static value, anything you want to be different you pass in some sort of random generator.
This library includes the randexp gem, which is used in these examples to generate random data. You can read more about
it here at https://github.com/benburkert/randexp. However, you can use whatever libraries or methods you would like
to generate the data.

=== Using The Templates
If you'd like to get the hash by itself:
 ModelGrinder.gen_hash(YourModel, :valid, name: "Your mom" )
or
 YourModel.gen_hash(:valid, name: "Your mom")
Anything you pass in the last hash will override the values in the hash generated by the template.
If you'd like to have them assigned to a model instance, use:
 ModelGrinder.generate(YourModel, :valid, name: "Your mom")
or
 YourModel.generate(:valid, name: "Your mom")
If you'd like to persist the model to the data store (by calling `save` on the instance), use the `build` method instead
with the same arguments. It will return the instance for you to manipulate later.

=== Picking generated models
To retrieve a random set of previously generated models, `pick` is your best friend.
 YourModel.pick(:valid, number: 3)
This will pick up to 3 different previously generated models. If there are none, it will return an empty array. If
you leave off the number, it defaults to 1

== Documentation
This library is documented with YARD. If you'd like you can clone this repository and run `rake yard` to generate the
HTML documentation.

== Copyright Notice
Copyright Notice
Copyright (c) 2012-2013 Jeremy Nicoll

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.